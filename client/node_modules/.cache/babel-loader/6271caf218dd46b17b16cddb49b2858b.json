{"ast":null,"code":"import _defineProperty from \"/Users/Lena/Documents/Programming/reactcalendarapp/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/Lena/Documents/Programming/reactcalendarapp/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/Lena/Documents/Programming/reactcalendarapp/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_EVENT, LOAD_EVENTS_FROM_DB, FLUSH } from '../actions/actionConstants'; //import update from 'immutability-helper';\n\nimport empty_events from '../data/events'; //have some reducer composition for modifying state(refs). display events through props(?)\n//make more than one even addable later on - store by unique ID, day, and text :)\n\n/* events: {\n    0:{ \n        1:\"new years day\",\n        15:\"mlk day\"\n    },\n    1:{},\n    2:{},\n    3:{},\n    ....\n    11:{}}\n*/\n//anytime an event is changed, save this to mongodb\n\nfunction events() {\n  var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : empty_events;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var month = action.month;\n  var day = action.day;\n  var text = action.text;\n\n  switch (action.type) {\n    case FLUSH:\n      return empty_events;\n\n    case ADD_EVENT:\n      if (events[month][day]) {\n        ///day already has something, add to exisiting array\n        var event_array = events[month][day];\n        return _objectSpread({}, events, _defineProperty({}, month, _objectSpread({}, events[month], _defineProperty({}, day, [].concat(_toConsumableArray(event_array), [text])))));\n      } else {\n        return _objectSpread({}, events, _defineProperty({}, month, _objectSpread({}, events[month], _defineProperty({}, day, [text]))));\n      }\n\n    // add method to save to mongoDB whenever there is a change\n\n    case LOAD_EVENTS_FROM_DB:\n      console.log(events);\n      return _objectSpread({}, events, action.events[0]);\n\n    default:\n      return events;\n  }\n}\n\nexport default events;","map":{"version":3,"sources":["/Users/Lena/Documents/Programming/reactcalendarapp/client/src/reducers/events.js"],"names":["ADD_EVENT","LOAD_EVENTS_FROM_DB","FLUSH","empty_events","events","action","month","day","text","type","event_array","console","log"],"mappings":";;;AAAA,SAAQA,SAAR,EAAkBC,mBAAlB,EAAsCC,KAAtC,QAAkD,4BAAlD,C,CACA;;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;AAEA;;AACA;;;;;;;;;;;AAYA;;AACA,SAASC,MAAT,GAA+C;AAAA,MAA/BA,MAA+B,uEAAtBD,YAAsB;AAAA,MAARE,MAAQ;AAC3C,MAAMC,KAAK,GAACD,MAAM,CAACC,KAAnB;AACA,MAAMC,GAAG,GAACF,MAAM,CAACE,GAAjB;AACA,MAAMC,IAAI,GAACH,MAAM,CAACG,IAAlB;;AACA,UAAOH,MAAM,CAACI,IAAd;AACI,SAAKP,KAAL;AACI,aAAOC,YAAP;;AACJ,SAAKH,SAAL;AAEI,UAAII,MAAM,CAACE,KAAD,CAAN,CAAcC,GAAd,CAAJ,EAAuB;AAAE;AACrB,YAAIG,WAAW,GAACN,MAAM,CAACE,KAAD,CAAN,CAAcC,GAAd,CAAhB;AACA,iCACOH,MADP,sBACgBE,KADhB,oBAC2BF,MAAM,CAACE,KAAD,CADjC,sBAC2CC,GAD3C,+BACoDG,WADpD,IACgEF,IADhE;AAGH,OALD,MAMI;AACA,iCACOJ,MADP,sBACgBE,KADhB,oBAC2BF,MAAM,CAACE,KAAD,CADjC,sBAC2CC,GAD3C,EACgD,CAACC,IAAD,CADhD;AAGH;;AAED;;AAEJ,SAAKP,mBAAL;AACIU,MAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACA,+BACOA,MADP,EAEOC,MAAM,CAACD,MAAP,CAAc,CAAd,CAFP;;AAKJ;AACI,aAAOA,MAAP;AA3BR;AA6BH;;AAEG,eAAeA,MAAf","sourcesContent":["import {ADD_EVENT,LOAD_EVENTS_FROM_DB,FLUSH} from '../actions/actionConstants';\n//import update from 'immutability-helper';\nimport empty_events from '../data/events';\n\n//have some reducer composition for modifying state(refs). display events through props(?)\n\n//make more than one even addable later on - store by unique ID, day, and text :)\n/* events: {\n    0:{ \n        1:\"new years day\",\n        15:\"mlk day\"\n    },\n    1:{},\n    2:{},\n    3:{},\n    ....\n    11:{}}\n*/\n\n//anytime an event is changed, save this to mongodb\nfunction events(events = empty_events, action) {\n    const month=action.month;\n    const day=action.day;\n    const text=action.text;\n    switch(action.type){\n        case FLUSH:\n            return empty_events;\n        case ADD_EVENT:\n            \n            if (events[month][day]){ ///day already has something, add to exisiting array\n                let event_array=events[month][day];\n                return {\n                    ...events, [month]:{...events[month], [day]:[...event_array,text]}\n                };\n            }\n            else{\n                return {\n                    ...events, [month]:{...events[month], [day]:[text]}\n                };\n            }\n\n            // add method to save to mongoDB whenever there is a change\n          \n        case LOAD_EVENTS_FROM_DB:\n            console.log(events);\n            return {\n                ...events,\n                ...action.events[0]\n            }\n\n        default:\n            return events;\n    }\n}\n\n    export default events;"]},"metadata":{},"sourceType":"module"}